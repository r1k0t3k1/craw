package main.java.views;

import burp.api.montoya.MontoyaApi;
import main.java.models.OptionsModel;
import main.java.models.ProxyLogItemModel;
import main.java.models.ProxyLogTableModel;
import main.java.utils.InfoDialog;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;
import java.util.List;

public class MainTab {
    private final MontoyaApi api;
    private JPanel panel;
    private JComboBox<String> requestNameComboBox;
    private JButton settingButton;
    private JToggleButton proxySwitchButton;
    private JTable proxyLogTable;
    private ProxyLogTableModel tableModel;
    private JSplitPane requestResponsePanel;
    private ProxyLogPanel proxyLogPanel;
    private OptionsPanel optionsPanel;
    private JFrame dialogFrame;


    public void toggleIsProxying() {
        var current = proxySwitchButton.isSelected();
        var text = current ? "Proxying!" : "Passing...";
        proxySwitchButton.setText(text);
        this.optionsPanel.getOptionsModel().isProxying = current;
    }


    public MainTab(MontoyaApi api, ProxyLogTableModel tableModel, OptionsPanel optionsPanel, ProxyLogPanel proxyLogPanel) {
        this.api = api;
        this.tableModel = tableModel;
        this.proxyLogPanel = proxyLogPanel;
        this.optionsPanel = optionsPanel;
        this.requestNameComboBox = new JComboBox<>(new DefaultComboBoxModel<>(optionsPanel.getOptionsModel().requestNameHistory));
        $$$setupUI$$$();
    }

    private void createUIComponents() {
        panel = new JPanel();

        this.dialogFrame = new JFrame();
        this.dialogFrame.add(this.optionsPanel.$$$getRootComponent$$$());
        this.dialogFrame.setSize(600, 400);
        this.dialogFrame.setLocationRelativeTo(api.userInterface().swingUtils().suiteFrame());
        this.dialogFrame.setVisible(false);

        settingButton = new JButton();
        settingButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                dialogFrame.setVisible(true);
            }
        });
        proxySwitchButton = new JToggleButton();
        proxySwitchButton.setSelected(false);
        proxySwitchButton.setText("Passing...");
        requestResponsePanel = new JSplitPane();
        var requestEditor = api.userInterface().createHttpRequestEditor();
        var responseEditor = api.userInterface().createHttpResponseEditor();
        requestResponsePanel.setLeftComponent(requestEditor.uiComponent());
        requestResponsePanel.setRightComponent(responseEditor.uiComponent());

        proxySwitchButton.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent changeEvent) {
                toggleIsProxying();
            }
        });


        ((JTextField) requestNameComboBox.getEditor().getEditorComponent()).getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                update(e);
            }

            public void removeUpdate(DocumentEvent e) {
                update(e);
            }

            public void insertUpdate(DocumentEvent e) {
                update(e);
            }

            public void update(DocumentEvent e) {
                if (e.getDocument().getLength() < 0) {
                    return;
                }
                try {
                    optionsPanel.getOptionsModel().currentRequestName = e.getDocument().getText(0, e.getDocument().getLength());
                } catch (Exception exception) {
                    return;
                }
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel.setLayout(new GridBagLayout());
        panel.setAlignmentX(1.0f);
        panel.setAlignmentY(1.0f);
        panel.setAutoscrolls(false);
        panel.setPreferredSize(new Dimension(5000, 5000));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Request name: ");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 0.02;
        gbc.weighty = 0.05;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 0);
        panel.add(label1, gbc);
        requestNameComboBox.setEditable(true);
        Font requestNameComboBoxFont = this.$$$getFont$$$(null, -1, 22, requestNameComboBox.getFont());
        if (requestNameComboBoxFont != null) requestNameComboBox.setFont(requestNameComboBoxFont);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 0.05;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 0, 5, 5);
        panel.add(requestNameComboBox, gbc);
        Font settingButtonFont = this.$$$getFont$$$(null, -1, 28, settingButton.getFont());
        if (settingButtonFont != null) settingButton.setFont(settingButtonFont);
        settingButton.setInheritsPopupMenu(true);
        settingButton.setLabel("⚙");
        settingButton.setText("⚙");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 0.05;
        gbc.weighty = 0.05;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        panel.add(settingButton, gbc);
        Font proxySwitchButtonFont = this.$$$getFont$$$(null, -1, 26, proxySwitchButton.getFont());
        if (proxySwitchButtonFont != null) proxySwitchButton.setFont(proxySwitchButtonFont);
        proxySwitchButton.setLabel("Passing...");
        proxySwitchButton.setText("Passing...");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 0.05;
        gbc.weighty = 0.05;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(proxySwitchButton, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(proxyLogPanel.$$$getRootComponent$$$(), gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
